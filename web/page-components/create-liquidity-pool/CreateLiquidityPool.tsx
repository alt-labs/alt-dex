import type { NextPage } from "next";
import Head from "next/head";
import { ChangeEventHandler, useEffect, useState } from "react";
import { useCardanoWasmContext } from "../../context/cardano-wasm";
import { useNamiWalletContext } from "../../context/nami-wallet";
import { createLp } from "../../lib/create-lp-no-cs"; // skip coin selection and balancing for demo
import { DialogBody, DialogHeader, DialogSubmitButton } from "../styles";
import { TokenPair } from "../types";
import {
  AnotherInputWrapper,
  CloseModalButton,
  Dialog,
  DialogBlock,
  DialogFooter,
  HourglassLoader,
  InputWrapper,
  MaxButton,
  Modal,
  ModalAmount,
  ModalContent,
  ModalSubmitButton,
  SuccessSign,
  SwapArrowBlock,
  SwapArrowWrapper,
  TokenAmountInput,
} from "./styled";
import TokenSelector from "./TokenSelector/TokenSelector";
import {
  updateTokenState,
  useUpdateSecondTokenAmount,
} from "./util";
import { SwapAsset } from "../../lib/tx-builder/types";
import { mergeSwapAssets, valueToAssets } from "../../lib/utils";

enum ModalState {
  HIDDEN,
  VISIBLE,
  LOADING,
  SUCCESS,
}

const CreateLiquidityPool: NextPage = () => {
  const { wallet } = useNamiWalletContext();
  const { wasm } = useCardanoWasmContext();
  const [availableTokens, setAvailableTokens] = useState<SwapAsset[]>([]);
  const [tokens, setTokens] = useState<TokenPair>({
    firstToken: { token: availableTokens[0], amount: 0 },
    secondToken: { token: availableTokens[1], amount: 0 },
  });

  const [modalState, setModalState] = useState<ModalState>(ModalState.HIDDEN);
  const { firstToken, secondToken } = tokens;

  const getWalletAssets = async () => {
    if (!wallet || !wasm) {
      return [];
    }

    const utxoCbors = await wallet.getUtxos();
    const utxos = utxoCbors.map((utxoCbor) =>
      wasm.TransactionUnspentOutput.from_bytes(Buffer.from(utxoCbor, "hex"))
    );
    const assetsPerUtxo = await Promise.all(
      utxos.map((utxo) => valueToAssets(utxo.output().amount()))
    );


    const assetsFlat = assetsPerUtxo.flat()
    const fungableTokens = assetsFlat.filter((a) => a.amount > 1);

    return mergeSwapAssets(fungableTokens)
   };

  // useUpdateSecondTokenAmount(firstToken, secondToken, setTokens);

  useEffect(() => {
    getWalletAssets().then((tokens) => {
      setAvailableTokens(tokens);
      handleTokenSelected("firstToken")(tokens[0]);
      handleTokenSelected("secondToken")(tokens[1]);
    });
  }, [wallet, wasm]);

  const handleTokenSelected = (key: keyof TokenPair) => (token: SwapAsset) => {
    setTokens(updateTokenState(key, "token", token));
  };

  const handleMaxButtonClick = () => {
    setTokens(updateTokenState("firstToken", "amount", firstToken.token.amount));
  };

  const handleSecondMaxButtonClick = () => {
    setTokens(updateTokenState("secondToken", "amount", secondToken.token.amount));
  };

  const handleAmountChange: (
    key: keyof TokenPair
  ) => ChangeEventHandler<HTMLInputElement> = (key) => (event) => {
    const int = parseInt(event.target.value);
    const amount = isNaN(int) ? 0 : int;

    setTokens(updateTokenState(key, "amount", amount));
  };

  const showConfirmationModal = () => {
    setModalState(ModalState.VISIBLE);
  };

  const submitTransaction = () => {
    if (!wasm || !wallet) return;
    setModalState(ModalState.LOADING);
    createLp(wasm, wallet)
      .then((txHash) => {
        console.log("txHash", txHash);
        setModalState(ModalState.SUCCESS);
      })
      .catch((e) => {
        console.error(e);
        setModalState(ModalState.HIDDEN);
      });
  };

  const closeModal = () => {
    setModalState(ModalState.HIDDEN);
  };

  return (
    <>
      <Head>
        <title>Add liquidity</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Dialog>
        <DialogHeader>Add liquidity</DialogHeader>
        <DialogBody>
          <DialogBlock>
            <TokenSelector
              selectedToken={firstToken.token}
              availableTokens={availableTokens}
              onTokenSelect={handleTokenSelected("firstToken")}
              disabledTokens={[]}
              // disabledTokens={secondToken.token ? [secondToken.token] : []}
            />
            <InputWrapper>
              <AnotherInputWrapper>
                <MaxButton onClick={handleMaxButtonClick}>MAX</MaxButton>
                <TokenAmountInput
                  value={firstToken.amount}
                  placeholder="0.0"
                  onChange={handleAmountChange("firstToken")}
                />
              </AnotherInputWrapper>
            </InputWrapper>
          </DialogBlock>
          <SwapArrowBlock>
            <SwapArrowWrapper>
              ðŸ’§
            </SwapArrowWrapper>
          </SwapArrowBlock>
          <DialogBlock>
            <TokenSelector
              selectedToken={secondToken.token}
              availableTokens={availableTokens}
              onTokenSelect={handleTokenSelected("secondToken")}
              disabledTokens={[]}
              // disabledTokens={firstToken.token ? [firstToken.token] : []}
            />
            <InputWrapper>
              <AnotherInputWrapper>
                <MaxButton onClick={handleSecondMaxButtonClick}>MAX</MaxButton>
                <TokenAmountInput
                  value={secondToken.amount}
                  placeholder="0.0"
                  onChange={handleAmountChange("secondToken")}
                />
              </AnotherInputWrapper>
            </InputWrapper>
          </DialogBlock>
        </DialogBody>
        <DialogFooter>
          <DialogSubmitButton
            disabled={!(firstToken.amount > 0 && secondToken.amount > 0)}
            onClick={showConfirmationModal}
          >
            Confirm creating liquidity pool
          </DialogSubmitButton>
        </DialogFooter>
        <Modal isActive={modalState !== ModalState.HIDDEN}>
          <ModalContent shouldCenterText={modalState !== ModalState.HIDDEN}>
            <CloseModalButton onClick={closeModal}>&#10006;</CloseModalButton>
            {modalState === ModalState.VISIBLE && (
              <>
                <p>You will send</p>
                <ModalAmount>
                  {firstToken.amount} {firstToken.token.name}
                </ModalAmount>
                <ModalAmount>
                  {secondToken.amount} {secondToken.token.name}
                </ModalAmount>
                <ModalSubmitButton onClick={submitTransaction}>
                  Confirm creating liquidity pool
                </ModalSubmitButton>
              </>
            )}
            {modalState === ModalState.LOADING && (
              <>
                <HourglassLoader />
                <h2>Waiting for confirmation</h2>
              </>
            )}
            {modalState === ModalState.SUCCESS && (
              <>
                <SuccessSign>&#10003;</SuccessSign>
                <h2>Transaction submitted</h2>
                <ModalSubmitButton onClick={closeModal}>
                  Close
                </ModalSubmitButton>
              </>
            )}
          </ModalContent>
        </Modal>
      </Dialog>
    </>
  );
};

export default CreateLiquidityPool;
